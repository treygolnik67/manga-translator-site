# app.py ‚Äî –£–º–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –º–∞–Ω–≥–∏

import flet as ft
from PIL import Image
import fitz
import zipfile
import tempfile
from pathlib import Path
import easyocr
from g4f.client import Client
from langdetect import detect
from fpdf2 import FPDF
from ebooklib import epub

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞
TEMP_DIR = Path(tempfile.mkdtemp())
reader = easyocr.Reader(['ja', 'en'])
client = Client()

# --- –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ---
def convert_to_images(file_path):
    images = []
    ext = Path(file_path).suffix.lower()
    try:
        if ext in [".png", ".jpg", ".jpeg"]:
            images.append(Image.open(file_path))
        elif ext == ".pdf":
            pdf = fitz.open(file_path)
            for page_num in range(len(pdf)):
                page = pdf.load_page(page_num)
                pix = page.get_pixmap(dpi=120)
                img = Image.frombytes("RGB", [pix.width, pix.height], pix.samples)
                images.append(img)
            pdf.close()
        elif ext == ".cbz":
            with zipfile.ZipFile(file_path, 'r') as cbz:
                for file in sorted(cbz.namelist()):
                    if file.lower().endswith((".png", ".jpg", ".jpeg")):
                        with cbz.open(file) as img_file:
                            img = Image.open(img_file)
                            images.append(img)
        return images
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        return None

# --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ ---
def detect_language(text):
    try:
        return detect(text)
    except:
        return 'unknown'

# --- –ü–µ—Ä–µ–≤–æ–¥ ---
def translate(text, target_lang):
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": f"–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ {target_lang}: {text}"}]
        )
        return response.choices[0].message.content
    except:
        return f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ {target_lang}"

# --- OCR + –£–º–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ ---
def process_page(image):
    if image.width > 800:
        ratio = 800 / image.width
        new_height = int(image.height * ratio)
        img_resized = image.resize((800, new_height), Image.Resampling.LANCZOS)
    else:
        img_resized = image

    results = reader.readtext(img_resized)
    text = " ".join([res[1] for res in results if res[2] > 0.1])
    if not text.strip():
        return "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"

    lang = detect_language(text)
    if lang == 'ru':
        return text, "–£–∂–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º", "–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
    elif lang == 'en':
        ru_text = translate(text, "—Ä—É—Å—Å–∫–∏–π")
        return text, "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç", ru_text
    elif lang == 'ja':
        en_text = translate(text, "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π")
        ru_text = translate(en_text, "—Ä—É—Å—Å–∫–∏–π")
        return text, en_text, ru_text
    else:
        return text, f"–Ø–∑—ã–∫: {lang}", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫"

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ PDF ---
def save_translation_to_pdf(translations, output_path):
    pdf = FPDF()
    pdf.add_font("DejaVu", "", "DejaVuSans.ttf", uni=True)
    pdf.set_auto_page_break(auto=True, margin=15)
    for i, (jp, en, ru) in enumerate(translations):
        pdf.add_page()
        pdf.set_font("DejaVu", size=12)
        pdf.cell(0, 10, f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1}", ln=True, align="C")
        pdf.set_font("DejaVu", size=10)
        pdf.cell(0, 8, f"üáØüáµ –Ø–ø–æ–Ω—Å–∫–∏–π: {jp}", ln=True)
        pdf.cell(0, 8, f"üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: {en}", ln=True)
        pdf.cell(0, 8, f"üá∑üá∫ –†—É—Å—Å–∫–∏–π: {ru}", ln=True)
        pdf.ln(5)
    pdf.output(output_path)

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ EPUB ---
def save_translation_to_epub(translations, output_path):
    book = epub.EpubBook()
    book.set_title("–ü–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω–∞—è –º–∞–Ω–≥–∞")
    book.add_author("MangaTranslator")
    book.set_language("ru")

    for i, (jp, en, ru) in enumerate(translations):
        chapter = epub.EpubHtml(title=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1}", file_name=f"page_{i+1}.xhtml", lang="ru")
        chapter.content = f"""
            <h2>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1}</h2>
            <p><b>üáØüáµ –Ø–ø–æ–Ω—Å–∫–∏–π:</b> {jp}</p>
            <p><b>üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π:</b> {en}</p>
            <p><b>üá∑üá∫ –†—É—Å—Å–∫–∏–π:</b> {ru}</p>
        """
        book.add_item(chapter)

    book.toc = (epub.Link("page_1.xhtml", "–ù–∞—á–∞–ª–æ", "intro"),)
    book.add_item(epub.EpubNcx())
    book.add_item(epub.EpubNav())
    book.spine = ["nav"] + [ch for ch in book.get_items_of_type(epub.EpubHtml)]

    epub.write_epub(output_path, book, {})

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
def main(page: ft.Page):
    page.title = "MangaTranslator"
    page.theme_mode = "light"
    page.scroll = "adaptive"

    logo = ft.Image(src="logo.png", width=100, height=100) if Path("logo.png").exists() else ft.Container()

    file_picker = ft.FilePicker()
    save_pdf_picker = ft.FilePicker()
    save_epub_picker = ft.FilePicker()
    page.overlay.extend([file_picker, save_pdf_picker, save_epub_picker])

    result_jp = ft.Text()
    result_en = ft.Text()
    result_ru = ft.Text()
    image_display = ft.Image(width=300, height=400, fit=ft.ImageFit.CONTAIN)
    status = ft.Text("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    translations = []

    def on_file_picked(e: ft.FilePickerResultEvent):
        if e.files:
            file_path = e.files[0].path
            status.value = f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {Path(file_path).name}"
            images = convert_to_images(file_path)
            if images:
                page.session.set("images", images)
                page.session.set("current_page", 0)
                page.session.set("translations", [])
                translations.clear()
                update_page()
            else:
                status.value = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"
            page.update()

    def update_page():
        images = page.session.get("images")
        current_page = page.session.get("current_page", 0)
        if images:
            img = images[current_page]
            bio = tempfile.BytesIO()
            img.save(bio, format="PNG")
            image_display.src_base64 = f"image/png;base64,{bio.getvalue().encode('base64')}"
            image_display.update()

    def next_page(e):
        images = page.session.get("images")
        if images and page.session.get("current_page", 0) < len(images) - 1:
            page.session.set("current_page", page.session.get("current_page") + 1)
            update_page()

    def prev_page(e):
        if page.session.get("current_page", 0) > 0:
            page.session.set("current_page", page.session.get("current_page") - 1)
            update_page()

    def translate(e):
        images = page.session.get("images")
        current_page = page.session.get("current_page", 0)
        if images:
            status.value = "üß† –†–∞—Å–ø–æ–∑–Ω–∞—ë–º –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º..."
            page.update()
            jp, en, ru = process_page(images[current_page])
            result_jp.value = jp
            result_en.value = en
            result_ru.value = ru
            status.value = "‚úÖ –ì–æ—Ç–æ–≤–æ!"
            translations.append((jp, en, ru))
            page.session.set("translations", translations)
            page.update()

    def save_pdf(e):
        if not translations:
            status.value = "‚ùå –ù–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
            page.update()
            return
        save_pdf_picker.save_file(
            dialog_title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ PDF",
            file_name="–ø–µ—Ä–µ–≤–æ–¥_–º–∞–Ω–≥–∏.pdf",
            allowed_extensions=["pdf"]
        )

    def save_epub(e):
        if not translations:
            status.value = "‚ùå –ù–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"
            page.update()
            return
        save_epub_picker.save_file(
            dialog_title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ EPUB",
            file_name="–ø–µ—Ä–µ–≤–æ–¥_–º–∞–Ω–≥–∏.epub",
            allowed_extensions=["epub"]
        )

    def on_save_pdf(e: ft.FilePickerResultEvent):
        if e.path:
            save_translation_to_pdf(translations, e.path)
            status.value = f"‚úÖ PDF —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {e.path}"
            page.update()

    def on_save_epub(e: ft.FilePickerResultEvent):
        if e.path:
            save_translation_to_epub(translations, e.path)
            status.value = f"‚úÖ EPUB —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {e.path}"
            page.update()

    # UI
    page.add(
        ft.AppBar(title=ft.Text("MangaTranslator"), bgcolor=ft.colors.BLUE, center_title=True),
        ft.Row([logo], alignment=ft.MainAxisAlignment.CENTER),
        ft.Row([ft.Text("–£–º–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –º–∞–Ω–≥–∏", size=16)], alignment=ft.MainAxisAlignment.CENTER),
        ft.Row([ft.ElevatedButton("üìÅ –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª", on_click=lambda _: file_picker.pick_files(
            allowed_extensions=["pdf", "cbz", "jpg", "jpeg", "png"]
        ))], alignment=ft.MainAxisAlignment.CENTER),
        ft.Row([status], alignment=ft.MainAxisAlignment.CENTER),
        ft.Divider(),
        ft.Row([
            ft.ElevatedButton("‚óÄ –ù–∞–∑–∞–¥", on_click=prev_page),
            ft.ElevatedButton("üîç –ü–µ—Ä–µ–≤–µ—Å—Ç–∏", on_click=translate),
            ft.ElevatedButton("‚ñ∂ –í–ø–µ—Ä—ë–¥", on_click=next_page),
        ], alignment=ft.MainAxisAlignment.CENTER),
        ft.Row([
            ft.ElevatedButton("üì• –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ PDF", icon=ft.icons.PICTURE_AS_PDF, on_click=save_pdf),
            ft.ElevatedButton("üìö –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ EPUB", icon=ft.icons.BOOK, on_click=save_epub),
        ], alignment=ft.MainAxisAlignment.CENTER),
        ft.Divider(),
        ft.Row([
            ft.Container(image_display, alignment=ft.alignment.center, expand=True),
            ft.Container(ft.Column([
                ft.Text("üîç –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:", weight=ft.FontWeight.BOLD),
                result_jp,
                ft.Text("üá¨üáß –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π:", weight=ft.FontWeight.BOLD),
                result_en,
                ft.Text("üá∑üá∫ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π:", weight=ft.FontWeight.BOLD),
                result_ru,
            ], scroll=ft.ScrollMode.AUTO), width=350)
        ], expand=True)
    )

    file_picker.on_result = on_file_picked
    save_pdf_picker.on_result = on_save_pdf
    save_epub_picker.on_result = on_save_epub

ft.app(target=main)